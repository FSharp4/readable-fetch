"""
This type stub file was generated by pyright.
"""

log = ...
REGEXES = ...
class Unparseable(ValueError):
    ...


def to_int(x): # -> int | None:
    ...

def clean(text): # -> str:
    ...

def text_length(i): # -> int:
    ...

def compile_pattern(elements): # -> Pattern[Any] | Pattern[str] | None:
    ...

class Document:
    """Class to build a etree document out of html."""
    def __init__(self, input, positive_keywords=..., negative_keywords=..., url=..., min_text_length=..., retry_length=..., xpath=..., handle_failures=...) -> None:
        """Generate the document

        :param input: string of the html content.
        :param positive_keywords: regex, list or comma-separated string of patterns in classes and ids
        :param negative_keywords: regex, list or comma-separated string in classes and ids
        :param min_text_length: Tunable. Set to a higher value for more precise detection of longer texts.
        :param retry_length: Tunable. Set to a lower value for better detection of very small texts.
        :param xpath: If set to True, adds x="..." attribute to each HTML node,
        containing xpath path pointing to original document path (allows to
        reconstruct selected summary in original document).
        :param handle_failures: Parameter passed to `lxml` for handling failure during exception.
        Support options = ["discard", "ignore", None]

        Examples:
            positive_keywords=["news-item", "block"]
            positive_keywords=["news-item, block"]
            positive_keywords=re.compile("news|block")
            negative_keywords=["mysidebar", "related", "ads"]

        The Document class is not re-enterable.
        It is designed to create a new Document() for each HTML file to process it.

        API methods:
        .title() -- full title
        .short_title() -- cleaned up title
        .content() -- full content
        .summary() -- cleaned up content
        """
        ...
    
    def content(self): # -> str | bytearray | memoryview[_I]:
        """Returns document body"""
        ...
    
    def title(self): # -> str:
        """Returns document title"""
        ...
    
    def author(self): # -> Literal['[no-author]']:
        """Returns document author"""
        ...
    
    def short_title(self): # -> str:
        """Returns cleaned up document title"""
        ...
    
    def get_clean_html(self): # -> None:
        """
        An internal method, which can be overridden in subclasses, for example,
        to disable or to improve DOM-to-text conversion in .summary() method
        """
        ...
    
    def summary(self, html_partial=..., keep_all_images=...):
        """
        Given a HTML file, extracts the text of the article.

        :param html_partial: return only the div of the document, don't wrap
                             in html and body tags.
        :param keep_all_images: Keep all images in summary.

        Warning: It mutates internal DOM representation of the HTML document,
        so it is better to call other API methods before this one.
        """
        ...
    
    def get_article(self, candidates, best_candidate, html_partial=...): # -> HtmlElement:
        ...
    
    def select_best_candidate(self, candidates): # -> None:
        ...
    
    def get_link_density(self, elem): # -> float:
        ...
    
    def score_paragraphs(self): # -> dict[Any, Any]:
        ...
    
    def class_weight(self, e): # -> int:
        ...
    
    def score_node(self, elem): # -> dict[str, Any]:
        ...
    
    def remove_unlikely_candidates(self): # -> None:
        ...
    
    def transform_misused_divs_into_paragraphs(self): # -> None:
        ...
    
    def tags(self, node, *tag_names): # -> Generator[Any, Any, None]:
        ...
    
    def reverse_tags(self, node, *tag_names): # -> Generator[Any, Any, None]:
        ...
    
    def sanitize(self, node, candidates, keep_all_images=...):
        ...
    


def main(): # -> None:
    ...

if __name__ == "__main__":
    ...
